{"version":3,"sources":["getWeb3.js","Address.js","App.js","serviceWorker.js","index.js"],"names":["getWeb3","Promise","resolve","reject","window","addEventListener","ethereum","web3","Web3","enable","on","alert","location","reload","console","log","provider","providers","HttpProvider","Address","className","this","props","addr","React","Component","App","state","storageValue","accounts","contract","addresses","componentDidMount","eth","getAccounts","net","getId","networkId","deployedNetwork","SimpleStorageContract","networks","instance","Contract","abi","address","options1","fromBlock","getPastEvents","listAddress","methods","get","call","response","setState","error","runSet","valeur","document","getElementById","value","set","send","from","transac","options","toBlock","events","dataStored","returnValues","_address","data","type","id","onClick","map","addresse","i","Boolean","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f9ec8911.chunk.js","sourcesContent":["import Web3 from \"web3\";\n\nconst getWeb3 = () =>\n  new Promise((resolve, reject) => {\n    // Wait for loading completion to avoid race conditions with web3 injection timing.\n    window.addEventListener(\"load\", async () => {\n      // Modern dapp browsers...\n      if (window.ethereum) {\n        const web3 = new Web3(window.ethereum);\n        try {\n          // Request account access if needed\n          await window.ethereum.enable();\n          // Accounts now exposed\n          resolve(web3);\n          window.ethereum.on(\"disconnect\", function () {\n            alert(\"il faut se connecter\");\n          });\n          window.ethereum.on(\"accountsChanged\", function () {\n            window.location.reload();\n          });\n          window.ethereum.on(\"chainChanged\", function () {\n            window.location.reload();\n          });\n        } catch (error) {\n          reject(error);\n        }\n      }\n      // Legacy dapp browsers...\n      else if (window.web3) {\n        // Use Mist/MetaMask's provider.\n        const web3 = window.web3;\n        console.log(\"Injected web3 detected.\");\n        resolve(web3);\n      }\n      // Fallback to localhost; use dev console port by default...\n      else {\n        const provider = new Web3.providers.HttpProvider(\n          \"http://127.0.0.1:8545\"\n        );\n        const web3 = new Web3(provider);\n        console.log(\"No web3 instance injected, using Local web3.\");\n        resolve(web3);\n      }\n    });\n  });\n\nexport default getWeb3;\n","import React from \"react\";\n\nexport default class Address extends React.Component {\n  render() {\n    return (\n      <div className=\"header\">\n        <p>Voici l'addresse que vous utilisez: </p>\n        {this.props.addr}\n      </div>\n    );\n  }\n}\n","import React, { Component } from \"react\";\nimport SimpleStorageContract from \"./contracts/SimpleStorage.json\";\nimport getWeb3 from \"./getWeb3\";\nimport Address from \"./Address.js\";\n\nimport \"./App.css\";\n\n//Methode cradou de React\n\nclass App extends Component {\n  state = {\n    storageValue: 0,\n    web3: null,\n    accounts: null,\n    contract: null,\n    addresses: null,\n  };\n\n  componentDidMount = async () => {\n    try {\n      // Get network provider and web3 instance.\n      const web3 = await getWeb3();\n\n      // Use web3 to get the user's accounts.\n      const accounts = await web3.eth.getAccounts();\n\n      // Get the contract instance.\n      const networkId = await web3.eth.net.getId();\n      const deployedNetwork = SimpleStorageContract.networks[networkId];\n      const instance = new web3.eth.Contract(\n        SimpleStorageContract.abi,\n        deployedNetwork && deployedNetwork.address\n      );\n\n      //getting the events\n\n      // let options = {\n      //   fromBlock: 0, //Number || \"earliest\" || \"pending\" || \"latest\"\n      //   toBlock: \"latest\",\n      // };\n\n      let options1 = {\n        fromBlock: 0, //Number || \"earliest\" || \"pending\" || \"latest\"\n      };\n\n      //dataStored = nom de l'evenement à rechercher\n\n      //Ici on recherche les past events:\n\n      let listAddress = await instance.getPastEvents(\"dataStored\", options1);\n      console.log(\"listAddress =>\", listAddress);\n\n      //Puis on met à jour avec le listener:\n\n      // instance.events\n      //   .dataStored(options1)\n      //   .on(\"data\", (event) => listAddress.push(event));\n\n      const response = await instance.methods.get().call();\n\n      // Set web3, accounts, and contract to the state, and then proceed with an\n      // example of interacting with the contract's methods.\n      this.setState({\n        storageValue: response,\n        web3,\n        accounts,\n        contract: instance,\n        addresses: listAddress,\n      });\n    } catch (error) {\n      // Catch any errors for any of the above operations.\n      alert(\n        `Failed to load web3, accounts, or contract. Check console for details.`\n      );\n      console.error(error);\n    }\n  };\n\n  runSet = async () => {\n    const { accounts, contract } = this.state;\n    let valeur = document.getElementById(\"valeur\").value;\n    const transac = await contract.methods\n      .set(valeur)\n      .send({ from: accounts[0] });\n    const response = await contract.methods.get().call();\n\n    //getting the events\n    let options = {\n      fromBlock: 0, //Number || \"earliest\" || \"pending\" || \"latest\"\n      toBlock: \"latest\",\n    };\n\n    let listAddress = await contract.getPastEvents(\"dataStored\", options);\n    console.log(\"listAddress 2 =>\", listAddress);\n\n    // POUR S'AIDER A CREUSER DS LA Tx\n\n    console.log(\"transac =>\", transac);\n\n    //\n\n    console.log(\n      \"l'addresse est =>\",\n      transac.events.dataStored.returnValues._address\n    );\n    console.log(\"la data est =>\", transac.events.dataStored.returnValues.data);\n\n    this.setState({ storageValue: response, addresses: listAddress });\n  };\n\n  render() {\n    if (!this.state.web3) {\n      return <div>Loading Web3, accounts, and contract...</div>;\n    }\n    return (\n      <div className=\"App\">\n        <Address addr={this.state.accounts} />\n        <h1>Good to Go!</h1>\n        <p>Your Truffle Box is installed and ready.</p>\n        <h2>Smart Contract Example</h2>\n        <div>The stored value is: {this.state.storageValue}</div>\n        <p>Try changing the value by setting it via the input:</p>\n        <div>\n          <input type=\"text\" id=\"valeur\" />\n          <button onClick={this.runSet}>set</button>\n        </div>\n        <br />\n        <p>\n          Here are the addresses that interacted with the contract, and the\n          value they submited:\n        </p>\n        <table>\n          {this.state.addresses.map((addresse, i) => (\n            <tbody key={i}>\n              <tr>\n                <td>{addresse.returnValues._address}</td>\n                <td>{addresse.returnValues.data}</td>\n              </tr>\n            </tbody>\n          ))}\n        </table>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}